{
	"info": {
		"_postman_id": "be6e40e6-c4df-4916-a29d-3efaa7a7f193",
		"name": "Radiology Session Management API",
		"description": "Comprehensive API collection for the radiology dictation system session management, including study operations, WebSocket connections, and user session tracking.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47673802",
		"_collection_link": "https://jacky850628-9550001.postman.co/workspace/session~10123faa-60e3-433c-9e63-ff9ed3675dab/collection/47673802-be6e40e6-c4df-4916-a29d-3efaa7a7f193?action=share&source=collection_link&creator=47673802"
	},
	"item": [
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Study Opened Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('event');",
									"    pm.expect(response.event).to.have.property('event_id');",
									"    pm.expect(response.event).to.have.property('session_id');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true,
							"accept": true,
							"host": true,
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "AppName/1.0"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "20.168.120.11",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"study_id\": \"{{study_id}}\",\n  \"patient_id\": \"test_ggg_ddd\",\n  \"patient_dob\": \"1977-05-25\",\n  \"accession_number\": \"ACC123456\",\n  \"current_study_name\": \"Chest CT with Contrast\",\n  \"source\": \"viewer\",\n  \"target\": [\"dictation\", \"worklist\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/session/study_opened",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"study_opened"
							]
						},
						"description": "Register a study opened event and broadcast to target applications via Redis Stream"
					},
					"response": []
				},
				{
					"name": "Study Closed Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response).to.have.property('event');",
									"    pm.expect(response.event.event).to.equal('close_study');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"study_id\": \"{{study_id}}\",\n  \"source\": \"viewer\",\n  \"target\": [\"dictation\", \"worklist\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/session/study_closed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"study_closed"
							]
						},
						"description": "Register a study closed event and broadcast to target applications via Redis Stream"
					},
					"response": []
				},
				{
					"name": "Get Session State",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has session and user_info\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('session');",
									"    pm.expect(response).to.have.property('user_info');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/session/get_session_state",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"get_session_state"
							]
						},
						"description": "Get the current session state and events for the authenticated user"
					},
					"response": []
				}
			],
			"description": "New event-based session management endpoints"
		},
		{
			"name": "WebSocket Management",
			"item": [
				{
					"name": "Register WebSocket Connection (Dictation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains connection info\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('app_id');",
									"    pm.expect(response).to.have.property('user_id');",
									"    pm.expect(response.app_id).to.equal('dictation');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app_id\": \"dictation\",\n  \"client_info\": {\n    \"browser\": \"Chrome\",\n    \"version\": \"120.0.0\",\n    \"os\": \"Windows 11\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/session/open_websocket/dictation",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"open_websocket",
								"dictation"
							]
						},
						"description": "Register intent to open a WebSocket connection for the dictation application"
					},
					"response": []
				},
				{
					"name": "Register WebSocket Connection (Viewer)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app_id\": \"viewer\",\n  \"client_info\": {\n    \"browser\": \"Chrome\",\n    \"version\": \"120.0.0\",\n    \"os\": \"Windows 11\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/session/open_websocket/viewer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"open_websocket",
								"viewer"
							]
						},
						"description": "Register intent to open a WebSocket connection for the viewer application"
					},
					"response": []
				},
				{
					"name": "Register WebSocket Connection (Worklist)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"app_id\": \"worklist\",\n  \"client_info\": {\n    \"browser\": \"Chrome\",\n    \"version\": \"120.0.0\",\n    \"os\": \"Windows 11\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/session/open_websocket/worklist",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"open_websocket",
								"worklist"
							]
						},
						"description": "Register intent to open a WebSocket connection for the worklist application"
					},
					"response": []
				}
			],
			"description": "WebSocket connection management endpoints"
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response.status).to.equal('healthy');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/session/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"session",
								"health"
							]
						},
						"description": "Check the health status of session management services"
					},
					"response": []
				}
			],
			"description": "Service health monitoring"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Add any pre-request scripts here",
					"// For example, token refresh logic"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test scripts",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "test_user_123",
			"type": "string"
		},
		{
			"key": "study_id",
			"value": "STUDY_ABC123",
			"type": "string"
		}
	]
}