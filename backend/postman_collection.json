{
  "info": {
    "name": "Radiology Session Management API",
    "description": "Comprehensive API collection for the radiology dictation system session management, including study operations, WebSocket connections, and user session tracking.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "test_user_123",
      "type": "string"
    },
    {
      "key": "study_id",
      "value": "STUDY_ABC123",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Session Management",
      "description": "New event-based session management endpoints",
      "item": [
        {
          "name": "Study Opened Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"study_id\": \"{{study_id}}\",\n  \"patient_id\": \"SSE_Leia, Princess\",\n  \"patient_dob\": \"1977-05-25\",\n  \"accession_number\": \"ACC123456\",\n  \"current_study_name\": \"Chest CT with Contrast\",\n  \"source\": \"viewer\",\n  \"target\": [\"dictation\", \"worklist\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/session/study_opened",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "study_opened"]
            },
            "description": "Register a study opened event and broadcast to target applications via Redis Stream"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('event');",
                  "    pm.expect(response.event).to.have.property('event_id');",
                  "    pm.expect(response.event).to.have.property('session_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Study Closed Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"study_id\": \"{{study_id}}\",\n  \"source\": \"viewer\",\n  \"target\": [\"dictation\", \"worklist\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/session/study_closed",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "study_closed"]
            },
            "description": "Register a study closed event and broadcast to target applications via Redis Stream"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('event');",
                  "    pm.expect(response.event.event).to.equal('close_study');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Session State",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/session/get_session_state",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "get_session_state"]
            },
            "description": "Get the current session state and events for the authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has session and user_info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('session');",
                  "    pm.expect(response).to.have.property('user_info');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Study Management (Legacy)",
      "description": "Legacy study management endpoints for backward compatibility",
      "item": [
        {
          "name": "Open Study in Viewer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"study_id\": \"{{study_id}}\",\n  \"patient_id\": \"SSE_Leia, Princess\",\n  \"patient_dob\": \"1977-05-25\",\n  \"accession_number\": \"ACC123456\",\n  \"current_study_name\": \"Chest CT with Contrast\",\n  \"source\": \"viewer\",\n  \"target\": [\"dictation\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/session/viewer/study_opened/{{study_id}}",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "viewer", "study_opened", "{{study_id}}"]
            },
            "description": "Mark a study as opened in the viewer application and notify connected dictation clients"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains study info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('study_id');",
                  "    pm.expect(response).to.have.property('datetime');",
                  "    pm.expect(response).to.have.property('user_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Close Study in Viewer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/session/viewer/study_closed/{{study_id}}",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "viewer", "study_closed", "{{study_id}}"]
            },
            "description": "Mark a study as closed in the viewer application and notify connected dictation clients"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms closure\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('study_id');",
                  "    pm.expect(response.message).to.include('closed');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "WebSocket Management",
      "description": "WebSocket connection management endpoints",
      "item": [
        {
          "name": "Register WebSocket Connection (Dictation)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"app_id\": \"dictation\",\n  \"client_info\": {\n    \"browser\": \"Chrome\",\n    \"version\": \"120.0.0\",\n    \"os\": \"Windows 11\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/session/open_websocket/dictation",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "open_websocket", "dictation"]
            },
            "description": "Register intent to open a WebSocket connection for the dictation application"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains connection info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('app_id');",
                  "    pm.expect(response).to.have.property('user_id');",
                  "    pm.expect(response.app_id).to.equal('dictation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register WebSocket Connection (Viewer)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"app_id\": \"viewer\",\n  \"client_info\": {\n    \"browser\": \"Chrome\",\n    \"version\": \"120.0.0\",\n    \"os\": \"Windows 11\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/session/open_websocket/viewer",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "open_websocket", "viewer"]
            },
            "description": "Register intent to open a WebSocket connection for the viewer application"
          },
          "response": []
        },
        {
          "name": "Register WebSocket Connection (Worklist)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"app_id\": \"worklist\",\n  \"client_info\": {\n    \"browser\": \"Chrome\",\n    \"version\": \"120.0.0\",\n    \"os\": \"Windows 11\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/session/open_websocket/worklist",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "open_websocket", "worklist"]
            },
            "description": "Register intent to open a WebSocket connection for the worklist application"
          },
          "response": []
        },
        {
          "name": "Get WebSocket Status (Dictation)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/session/websocket_status/dictation",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "websocket_status", "dictation"]
            },
            "description": "Check if user has an active WebSocket connection for the dictation application"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains status info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('connected');",
                  "    pm.expect(response).to.have.property('app_id');",
                  "    pm.expect(response.app_id).to.equal('dictation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Active Connections",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/session/active_connections",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "active_connections"]
            },
            "description": "Get all active WebSocket connections for the authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains connection info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('active_connections');",
                  "    pm.expect(response).to.have.property('total_connections');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Management",
      "description": "User session and authentication management",
      "item": [
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/session/logout",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "logout"]
            },
            "description": "Clear session state and disconnect all WebSocket connections for the user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms logout\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('cleared_sessions');",
                  "    pm.expect(response).to.have.property('disconnected_websockets');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Check",
      "description": "Service health monitoring",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/session/health",
              "host": ["{{base_url}}"],
              "path": ["session", "api", "health"]
            },
            "description": "Check the health status of session management services"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Service is healthy\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Add any pre-request scripts here",
          "// For example, token refresh logic"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test scripts",
          "pm.test(\"Response time is less than 5000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test(\"Content-Type is application/json\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
